import networkx as nx
import statistics
import pandas as pd
from sodapy import Socrata
import matplotlib.pyplot as plt
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from pandas.tseries.holiday import USFederalHolidayCalendar
from random import randrange
from urllib.request import urlopen
import json
from shapely.geometry import shape, mapping
from shapely.geometry import Point

with urlopen('https://data.cityofnewyork.us/api/geospatial/d3c5-ddgc?method=export&format=GeoJSON') as response:
    nycmap = json.load(response)


def getAreaZone(log,lat):
    point = Point(log, lat)
    for f in nycmap['features']:
        multiPolygon = shape(f['geometry'])
        for p in multiPolygon:
            if point.within(p):
                return f['properties']['location_id']
    return False

print(getAreaZone(-73.91033685752402, 40.833138801952124))



def createGraph(dataName, gps = False):
    G = nx.DiGraph()
    client = Socrata("data.cityofnewyork.us", "ghD7sxmh9I7Ud8yq8Au5YKort", timeout=100000)
    start = 0  # Start at 0
    chunk_size = 10000  # Fetch 2000 rows at a time
    results = []  # Empty out our result list
    record_count = 5000000
    i = 1
    while True:
        i += 1
        # start = randrange(111000000)
        print(start)
        # Fetch the set of records starting at 'start'
        results = client.get(dataName,
                                      # select="tpep_pickup_datetime, tpep_dropoff_datetime, trip_distance, tip_amount",
                                      offset=start, limit=chunk_size)
        # Move up the starting record
        start = start + chunk_size

        #create the graph
        for item in results:
            if gps:
                try:
                    s = getAreaZone(float(item["pickup_longitude"]), float(item["pickup_latitude"]))
                    d = getAreaZone(float(item["dropoff_longitude"]), float(item["dropoff_latitude"]))
                except:
                    continue
            else:
                try:
                    s = item["pulocationid"]
                    d = item["dolocationid"]
                except:
                    continue
            if G.has_edge(s, d):
                G[s][d]['weight'] += 1
            else:
                G.add_edge(s, d, weight=1)

        if i * chunk_size > record_count:
            print("finish collect data")
            break
    #run page rank
    for u, v, a in G.edges(data=True):
        a['weight'] = a['weight'] / record_count
    pr = nx.pagerank(G
                     # alpha=0.3
                     )
    # nx.draw(G)
    # plt.show()
    return pr



def analyzeGraph():
    #2018
    d = {'50': 0.00676042567474356, '246': 0.012343947391732649, '100': 0.008763456397707616, '229': 0.011340440048187411, '249': 0.0107646438217392, '144': 0.00630606519069671, '209': 0.00229433129761911, '232': 0.003716336065196325, '162': 0.018407159279363674, '43': 0.0070543763142003136, '142': 0.017222470110182266, '233': 0.009941407335814353, '163': 0.013353554009112503, '236': 0.02443898613150452, '238': 0.015939617153054707, '170': 0.019420485353567038, '141': 0.015758325176392893, '237': 0.020520682047354237, '138': 0.009552347729158165, '230': 0.01584625775403412, '164': 0.012497334464348123, '234': 0.01759095002290384, '161': 0.02100019585929532, '48': 0.015557147003631809, '113': 0.009538693729134087, '211': 0.005521682597477953, '90': 0.009950017391812638, '137': 0.010436978442084738, '186': 0.014450516887880162, '79': 0.016391188964793066, '140': 0.012187059576026742, '263': 0.013567923777572504, '231': 0.01242749455637338, '239': 0.01769615821994082, '114': 0.007316103240409563, '107': 0.013990128026737776, '143': 0.008793892224396718, '151': 0.0067830667481118, '87': 0.006854911363620877, '224': 0.003287872063135855, '158': 0.0064195289428391296, '166': 0.00889072296522849, '264': 0.0032440674733226656, '13': 0.0068375022188423, '88': 0.0032493611759867994, '125': 0.00400953363545651, '1': 0.01781761387476813, '261': 0.0036411039100882167, '75': 0.010003776562921002, '148': 0.00799510139113648, '112': 0.004869149091347753, '132': 0.009509929521619265, '256': 0.004260785087609234, '52': 0.0018566185909441356, '68': 0.013641538110807129, '189': 0.0027975422253876904, '262': 0.008616853261302857, '10': 0.0012768210745063065, '7': 0.006451924039427851, '146': 0.0021167745417534954, '145': 0.004647348933305621, '181': 0.008334542779838914, '257': 0.001581404133588308, '243': 0.0031726202135388777, '193': 0.0028264006149596975, '220': 0.001693163837542229, '41': 0.007207115455330144, '25': 0.004548609472445556, '73': 0.0005850378761448693, '116': 0.003707249802678014, '33': 0.00563428511563534, '45': 0.0024468045257068018, '82': 0.0026265945845749795, '215': 0.0010268390540857843, '66': 0.00256109978125624, '226': 0.004377568256198183, '260': 0.0022282640906810896, '24': 0.0030947716270684875, '255': 0.004613753102780455, '152': 0.002541475303199224, '244': 0.005066549742163957, '174': 0.0020579523763942942, '123': 0.0022753577825554453, '42': 0.005690062385237825, '74': 0.00818447268812165, '4': 0.0034450923584156603, '265': 0.03274235466545187, '65': 0.004049294836563554, '131': 0.0010123951278983323, '159': 0.001789538312087937, '247': 0.0019926361661182167, '202': 0.0008639628397818641, '39': 0.0022439513669408394, '139': 0.0006851158925380448, '216': 0.001670497579482096, '223': 0.0035343222278390947, '168': 0.0028291633669747336, '12': 0.0007144791248947289, '129': 0.0033191920599257847, '134': 0.0010182542900290092, '17': 0.004518660455223444, '197': 0.0013891861386688062, '95': 0.003590629007254544, '83': 0.0010520796198226665, '49': 0.00508101835356454, '217': 0.0012189587636535404, '19': 0.0012115080501890571, '61': 0.0063928810727611465, '92': 0.00209583863120861, '97': 0.005035650532696564, '70': 0.0009753020064196928, '121': 0.000930472291360769, '37': 0.0036879987335272893, '80': 0.003634970455748846, '213': 0.0020020799775224327, '196': 0.001638308772305642, '218': 0.001156138639202537, '81': 0.001038757198486691, '55': 0.0015025074838043231, '210': 0.001468202245098111, '228': 0.002502373022833745, '102': 0.0007172811395459099, '171': 0.0008642785198049801, '76': 0.003109526716883275, '21': 0.0011819283563612613, '155': 0.0014335204749665058, '93': 0.0005771022122890055, '47': 0.0010644096958607554, '40': 0.0026273511096248565, '252': 0.0009471635753118923, '179': 0.0023848921992816255, '188': 0.003401684636315431, '36': 0.0022115135363578627, '54': 0.0010094239927489943, '127': 0.001671918982953067, '91': 0.0024248963226258086, '67': 0.0011342404887607147, '235': 0.0014620953443042779, '9': 0.0007931106426684561, '15': 0.0008401990959241406, '227': 0.0014480704464025292, '225': 0.0037847355511642046, '190': 0.0009298616744869781, '78': 0.0018379336464423436, '89': 0.003617604991585721, '200': 0.0011717717494084963, '29': 0.0012740627779746713, '71': 0.0016576422327248949, '26': 0.0026131795311849673, '198': 0.0017737609062789053, '130': 0.001778310831944679, '157': 0.00078848531991699, '245': 0.001234198413228615, '20': 0.0016911171544865627, '180': 0.0006006747536547692, '219': 0.0006717562328292387, '16': 0.0010928096887626644, '64': 0.0008028762218893253, '205': 0.0015048607672665934, '169': 0.0014908501639853229, '172': 0.0007096203862939048, '14': 0.002822572802777615, '28': 0.0008892506708738819, '72': 0.0016588752911197414, '56': 0.0010296436585183815, '191': 0.0014866226134121333, '98': 0.00075691784861101, '53': 0.0007479812615974386, '69': 0.0018235437791156216, '182': 0.0012444863279887364, '160': 0.0009937174985119096, '241': 0.0013031440336097602, '31': 0.0004661046601601007, '175': 0.0007726875582889376, '133': 0.0020752904617765914, '192': 0.0006760464803880389, '178': 0.0007855337445804811, '167': 0.0012656159352242783, '94': 0.0009812130882975053, '51': 0.001905337408324307, '119': 0.001375151755508489, '11': 0.0011303753029795938, '22': 0.0015484351107354203, '149': 0.0012402968884762952, '153': 0.000567966520102807, '242': 0.002152051263212502, '208': 0.0013052425382957455, '34': 0.0007197905246254869, '62': 0.0018396202820120538, '101': 0.0005817276915926233, '106': 0.001865394145763305, '6': 0.0014615973763185454, '165': 0.0019458826480175133, '195': 0.001317356686524735, '185': 0.0012893847488881919, '258': 0.0011581093971986616, '135': 0.0013740582200614652, '126': 0.0011262637914082247, '60': 0.0010749976649498268, '150': 0.00070444127793844, '77': 0.0008779503651533502, '85': 0.0012787135239912331, '207': 0.00044879839591717907, '214': 0.0016499754432979918, '108': 0.001010841803158738, '63': 0.0007704479312906091, '32': 0.001334840886663992, '86': 0.0007111259781281676, '254': 0.0016558177708579681, '222': 0.00064254911121729, '250': 0.0011226179173310284, '8': 0.000410801336719759, '117': 0.0010175628277121335, '136': 0.0014280681261403716, '259': 0.0014993030397627617, '124': 0.000693914854156017, '35': 0.0015166474939290063, '173': 0.000821497568024878, '194': 0.0005935605617314552, '128': 0.0005432682333083146, '203': 0.0008917351379976784, '122': 0.0006899438233428874, '3': 0.0012819301955934658, '23': 0.0012325872509372849, '184': 0.00039283981494603754, '177': 0.0015739337989249618, '18': 0.0018027204254028979, '118': 0.0007230642433309212, '147': 0.0012647378385293923, '201': 0.0004709306563752308, '109': 0.004213201917652428, '46': 0.0004285465850013706, '38': 0.0006453623203568925, '221': 0.0004323365200228156, '5': 0.0007170410843397321, '251': 0.008946929901311391, '183': 0.0006760726224973034, '248': 0.0009848682821129312, '212': 0.0007669536152263596, '111': 0.00040526228960938355, '115': 0.00039909931104854606, '176': 0.0003946847384164255, '57': 0.00041330112557776057, '240': 0.0004316402778860549, '120': 0.0004617675391367402, '156': 0.0005129422147162821, '58': 0.0006151579239613624, '96': 0.00042244292642661265, '206': 0.004060442541206581, '253': 0.0005124383644218879, '105': 0.0004502594268105131, '204': 0.0071781268763467816, '27': 0.0007198748930999212, '44': 0.00039277476298039943, '30': 0.0003918031132597394, '154': 0.0004366928932128329, '187': 0.00040895154944781695, '84': 0.0007161040702646636, '2': 0.0004114242243112962, '59': 0.00045332795550526763}
    m = sorted(d, key=d.get, reverse=True)
    print(m)


dict = {
    2011: {
        'name': 'uwyp-dntv',
        'gps': True
    },
    2012: {
        'name': 'kerk-3eby',
        'gps': True
    },
    2013: {
        'name': 't7ny-aygi',
        'gps': True
    },
    2014: {
        'name': 'gkne-dk5s',
        'gps': True
    },
    2015: {
        'name': '2yzn-sicd',
        'gps': True
    },
    2016: {
        'name': 'uacg-pexx',
        'gps': True
    },
    2017: {
        'name': 'biws-g3hs',
        'gps': False
    },
    2018: {
        'name': 't29m-gskq',
        'gps': False
    },
    2019: {
        'name': '2upf-qytp',
        'gps': False
    },
    2020: {
        'name': 'kxp8-n2sj',
        'gps': False
    }
}
pr = {}
for k,v in dict.items():
    pr[k] = createGraph(v['name'], v['gps'])

print(pr)